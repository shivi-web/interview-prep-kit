1. Parallel Processing

A computer has a certain number of cores and a list of files that need to be executed. If a file is executed by a single core, the execution time equals the number of lines of code in the file. If the lines of code can be divided by the number of cores, another option is to execute the file in parallel using all the cores. in which case the execution time is divided by the number of cores. However, there is a limit as to how many files can be executed in parallel. Given the lengths of the code files, the number of cores, and the limit, what is the minimum amount of time needed to execute all the files?

For example, let's say that there are n = 5 files, where files = [4, 1, 3, 2, 8] (indicating the number of lines of code in each file), numCores = 4, and limit= 1. Even though both the first and fifth files can be executed in parallel, you must choose only one of them because the limit is 1. The optimal way is to parallelize the last file, so the minimum execution time required is 4+1+3+2+(8/4) = 12. Therefore, the answer is 12.


class Result {

    /*
     * Complete the 'minTime' function below.
     *
     * The function is expected to return a LONG_INTEGER.
     * The function accepts following parameters:
     *  1. INTEGER_ARRAY files
     *  2. INTEGER numCores
     *  3. INTEGER limit
     */

    public static long minTime(List<Integer> files, int numCores, int limit) {
    long totalTime=0;
    Collections.sort(files);
    /*for(int i=0;i<files.size();i++){
    totalTime=totalTime+files.get(i);
    }*/
    int tempLimit;
    for(int i=files.size()-1;i>=0;i--){
        if(numCores==1){
            totalTime=totalTime+files.get(i);
        }
        else if(files.get(i)%numCores==0&&limit>0){
            totalTime=totalTime+files.get(i)/numCores;
            limit--;
        }
        else{
            totalTime=totalTime+files.get(i);
        }
        System.out.println(totalTime+" "+files.get(i));
    }
    
    return totalTime;
    }

}
